import {
  Box,
  HStack,
  IconButton,
  Image,
  Portal,
  Stack,
  Tooltip,
  Button,
  Card,
  CardBody,
  CardHeader
} from '@kvib/react';
import { useAtomValue } from 'jotai';
import { useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  displayCompassOverlayAtom,
  magneticDeclinationAtom,
  mapOrientationDegreesAtom,
  useMagneticNorthAtom,
} from './atoms';
import { useCompassFileName, useMapSettings } from './mapHooks';
import { DrawSettings } from '../settings/draw/DrawSettings';

export const MapOverlay = () => {
  const { setMapFullScreen, setMapLocation, setMapAngle, rotateSnappy } =
    useMapSettings();
  const mapOrientation = useAtomValue(mapOrientationDegreesAtom);
  const magneticDeclination = useAtomValue(magneticDeclinationAtom);
  const useMagneticNorth = useAtomValue(useMagneticNorthAtom);
  const [portalTarget, setPortalTarget] = useState<HTMLElement | null>(null);
  const portalRef = useRef<HTMLElement>(null);
  const [zoomControl, setZoomControl] = useState<HTMLElement | null>(null);
  const zoomRef = useRef<HTMLElement>(null);
  const { t } = useTranslation();
  const displayCompassOverlay = useAtomValue(displayCompassOverlayAtom);
  const compassFileName = useCompassFileName();

  const compassOrientation =
    mapOrientation + (useMagneticNorth ? magneticDeclination : 0);

  

  useEffect(() => {
    setTimeout(() => {
      const portalTargetElement = document.getElementById(
        'custom-control-portal',
      );
      portalRef.current = portalTargetElement;
      setPortalTarget(portalTargetElement);
    }, 10);
  }, []);

  useEffect(() => {
    setTimeout(() => {
      const olZoomControlElement = document.getElementsByClassName(
        'ol-zoom',
      )[0] as HTMLElement;
      zoomRef.current = olZoomControlElement;
      setZoomControl(olZoomControlElement);
    }, 10);
  });

  const [showDrawSettings, setShowDrawSettings] = useState(false)
  
  //NOTE: Some of the overlay is generated by openlayers. See map.css for those styles.
  return (
    <>
      {portalTarget && (
        <Portal container={portalRef}>
          {displayCompassOverlay && (
            <Image
              rotate={compassOrientation + 'deg'}
              position={'absolute'}
              width="16%"
              top="42%"
              left="42%"
              src={compassFileName}
              userSelect={'none'}
              pointerEvents={'none'}
            />
          )}

          <Box position="absolute" bottom="16px" left="16px" zIndex={10}>
            <a
              href="https://www.kartverket.no"
              target="_blank"
              rel="noopener noreferrer"
            >
              <img
                src="/logos/KV_logo_staa.svg"
                alt="Logo"
                style={{ height: 64 }}
              />
            </a>
          </Box>
          <Box position="absolute" top="16px" right="16px" zIndex={10}>
            <Stack>
              {document.fullscreenEnabled && (
                <Tooltip content={t('map.overlay.fullscreen')}>
                  <IconButton
                    onClick={() => {
                      setMapFullScreen(true);
                    }}
                    variant="ghost"
                    icon={'fullscreen'}
                  />
                </Tooltip>
              )}
              <Tooltip content={t('map.overlay.myPosition')}>
                <IconButton
                  onClick={() => {
                    navigator.geolocation.getCurrentPosition((pos) => {
                      setMapLocation(
                        [pos.coords.longitude, pos.coords.latitude],
                        'EPSG:4326',
                        15,
                      );
                    });
                  }}
                  variant="ghost"
                  icon={'my_location'}
                />
              </Tooltip>
            </Stack>
          </Box>
        </Portal>
      )}

      <Box position="absolute" top="16px" left="16px" zIndex={10}>
        <Stack>
          <Button
            colorPalette="green"
            leftIcon="edit"
            size="md"
            variant="solid"
            onClick={() => setShowDrawSettings((prev) => !prev)}
          >
            Tegne
          </Button>

          {showDrawSettings && (
            <Card width="300px" boxShadow="lg">
              <CardHeader fontWeight="bold">Tegneverkt√∏y</CardHeader>
              <CardBody>
                <DrawSettings />
              </CardBody>
            </Card>
          )}
        </Stack>
      </Box>

      {zoomControl && (
        <Portal container={zoomRef}>
          <Box zIndex={10}>
            <HStack gap={0}>
              <IconButton
                icon={'switch_access_shortcut'}
                variant="ghost"
                _hover={{ bg: 'transparent' }}
                m={0}
                p={0}
                onClick={() => {
                  rotateSnappy('right');
                }}
                mr={-3}
              />
              <IconButton
                icon={'navigation'}
                variant="ghost"
                _hover={{ bg: 'transparent' }}
                onClick={() => {
                  setMapAngle(0);
                }}
                m={0}
                p={0}
                rotate={mapOrientation + 'deg'}
                mr={-3}
              />
              <IconButton
                icon={'switch_access_shortcut'}
                variant="ghost"
                _hover={{ bg: 'transparent' }}
                transform={'scale(-1,1)'}
                m={0}
                p={0}
                onClick={() => {
                  rotateSnappy('left');
                }}
              />
            </HStack>
          </Box>
        </Portal>
      )}
    </>
  );
};
